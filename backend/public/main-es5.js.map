{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/core/auth/auth.service.ts","webpack:///src/app/core/core.module.ts","webpack:///src/app/core/module-import-guard.ts","webpack:///src/app/core/token/token.service.ts","webpack:///src/app/routes/pages/login/login.component.ts","webpack:///src/app/routes/pages/login/login.component.html","webpack:///src/app/routes/pages/pages.module.ts","webpack:///src/app/routes/pages/recover/recover.component.ts","webpack:///src/app/routes/pages/recover/recover.component.html","webpack:///src/app/routes/pages/register/register.component.ts","webpack:///src/app/routes/pages/register/register.component.html","webpack:///src/app/routes/routes.module.ts","webpack:///src/app/routes/routes.ts","webpack:///src/app/shared/helpers/must-match.validator.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","selector","templateUrl","styleUrls","AppModule","forRoot","declarations","imports","providers","bootstrap","AuthService","http","baseUrl","apiUrl","payLoad","post","providedIn","CoreModule","parentModule","throwIfAlreadyLoaded","moduleName","TokenService","token","set","localStorage","setItem","getItem","removeItem","get","payload","split","decode","JSON","parse","atob","LoginComponent","fb","authService","tokenService","error","valForm","group","required","email","$ev","value","preventDefault","c","controls","markAsTouched","valid","console","log","stringify","login","subscribe","data","handleResponse","err","handleError","handle","access_token","submitForm","PagesModule","RecoverComponent","RegisterComponent","password","compose","pattern","certainPassword","passwordForm","validator","name","passwordGroup","password_confirmation","confirmPassword","signup","errors","property","push","RoutesModule","routes","path","component","redirectTo","MustMatch","controlName","matchingControlName","formGroup","control","matchingControl","mustMatch","setErrors","SharedModule","ngModule","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  \n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { CoreModule } from './core/core.module';\nimport { RoutesModule } from './routes/routes.module';\nimport { SharedModule } from './shared/shared.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    HttpClientModule,\n    BrowserModule,\n    CoreModule,\n    SharedModule.forRoot(),\n    RoutesModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private baseUrl = environment.apiUrl;\n\n\n  constructor(private http: HttpClient) {}\n\n  signup(payLoad) {\n    return this.http.post(`${this.baseUrl}/signup`, payLoad)\n  }\n\n  login(payLoad) {\n    return this.http.post(`${this.baseUrl}/login`, payLoad);\n  }\n\n}\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\nimport { throwIfAlreadyLoaded } from './module-import-guard';\r\nimport { AuthService } from './auth/auth.service';\r\nimport { TokenService } from './token/token.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n    ],\r\n    providers: [\r\n        AuthService,\r\n        TokenService\r\n    ],\r\n    declarations: [\r\n    ],\r\n    exports: [\r\n    ]\r\n})\r\nexport class CoreModule {\r\n    constructor( @Optional() @SkipSelf() parentModule: CoreModule) {\r\n        throwIfAlreadyLoaded(parentModule, 'CoreModule');\r\n    }\r\n}\r\n","// https://angular.io/styleguide#!#04-12\r\nexport function throwIfAlreadyLoaded(parentModule: any, moduleName: string) {\r\n    if (parentModule) {\r\n      throw new Error(`${moduleName} has already been loaded. Import Core modules in the AppModule only.`);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenService {\n\n  constructor() { }\n\n  handle(token) {\n    this.set(token);\n  }\n\n  set(token) {\n    localStorage.setItem('token', token);\n  }\n\n  get() {\n    return localStorage.getItem('token');\n  }\n\n  remove() {\n    localStorage.removeItem('token');\n  }\n\n  isValid() {\n\n    const token = this.get();\n    if(token) {\n      const payload = this.payload(token);\n    }\n  }\n\n  payload(token) {\n    const payload = token.split('.')[1];\n    return this.decode(payload);\n  }\n\n  decode(payload) {\n    return JSON.parse(atob(payload));\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/core/auth/auth.service';\nimport { TokenService } from 'src/app/core/token/token.service';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n    error = null;\n    valForm: FormGroup;\n\n    constructor(\n        public fb: FormBuilder, \n        private authService: AuthService,\n        private tokenService: TokenService\n    ) {\n\n        this.valForm = fb.group({\n            'email': ['', [Validators.required, Validators.email]],\n            'password': [null, Validators.required]\n        });\n\n    }\n\n    submitForm($ev, value: any) {\n        $ev.preventDefault();\n        for (let c in this.valForm.controls) {\n            this.valForm.controls[c].markAsTouched();\n        }\n        if (this.valForm.valid) {\n            console.log('Valid!');\n            console.log(value);\n            console.log(JSON.stringify(this.valForm.value));\n            this.error = null;\n            return this.authService.login(value).subscribe(\n              data => this.handleResponse(data),\n              err  => this.handleError(err)\n            );\n        }\n    }\n\n    handleResponse(data) {\n        this.tokenService.handle(data.access_token);\n    }\n\n    handleError(error) {\n      console.log(error.error.error);\n      this.error = error.error.error;\n    }\n    ngOnInit() {\n\n    }\n\n}\n","<div class=\"wrapper\">\n    <div class=\"block-center mt-4 wd-xl\">\n        <!-- START card-->\n        <div class=\"card card-flat\">\n            <div class=\"card-header text-center bg-dark\">\n                <a href=\"#\">\n                    <img class=\"block-center rounded\" src=\"assets/img/logo.png\" alt=\"Image\" />\n                </a>\n            </div>\n            <div class=\"card-body\">\n                <p class=\"text-center py-2\">SIGN IN TO CONTINUE.</p>\n                <form [formGroup]=\"valForm\" class=\"form-validate mb-3\" role=\"form\" name=\"loginForm\" novalidate=\"\" (submit)=\"submitForm($event, valForm.value)\">\n                    <div class=\"alert alert-danger\" *ngIf=\"error\">{{error}}</div>\n                    <div class=\"form-group\">\n                        <div class=\"input-group with-focus\">\n                            <input class=\"form-control border-right-0\" id=\"exampleInputEmail1\" type=\"email\" name=\"email\" placeholder=\"Enter email\" autocomplete=\"off\" formControlName=\"email\" required=\"\" />\n                            <div class=\"input-group-append\">\n                                <span class=\"input-group-text text-muted bg-transparent border-left-0\">\n                                    <em class=\"fa fa-envelope\"></em>\n                                </span>\n                            </div>\n                        </div>\n                        <div class=\"text-danger\" *ngIf=\"valForm.controls['email'].hasError('required') && (valForm.controls['email'].dirty || valForm.controls['email'].touched)\">This field is required</div>\n                        <div class=\"text-danger\" *ngIf=\"valForm.controls['email'].hasError('email') && (valForm.controls['email'].dirty || valForm.controls['email'].touched)\">This field must be a valid email address</div>\n                    </div>\n                    <div class=\"form-group\">\n                        <div class=\"input-group with-focus\">\n                            <input class=\"form-control border-right-0\" id=\"exampleInputPassword1\" type=\"password\" name=\"password\" placeholder=\"Password\" formControlName=\"password\" required=\"\" />\n                            <div class=\"input-group-append\">\n                                <span class=\"input-group-text text-muted bg-transparent border-left-0\">\n                                    <em class=\"fa fa-lock\"></em>\n                                </span>\n                            </div>\n                        </div>\n                        <div class=\"text-danger\" *ngIf=\"valForm.controls['password'].hasError('required') && (valForm.controls['password'].dirty || valForm.controls['password'].touched)\">This field is required</div>\n                    </div>\n                    <div class=\"clearfix\">\n                        <div class=\"checkbox c-checkbox float-left mt0\">\n                            <label>\n                                <input type=\"checkbox\" value=\"\" name=\"account_remember\" />\n                                <span class=\"fa fa-check\"></span>Remember Me</label>\n                        </div>\n                        <div class=\"float-right\">\n                            <a class=\"text-muted\" [routerLink]=\"'/recover'\">Forgot your password?</a>\n                        </div>\n                    </div>\n                    <button class=\"btn btn-block btn-primary mt-3\" type=\"submit\">Login</button>\n                </form>\n                <!-- <div class=\"alert alert-danger text-center\" ></div> -->\n                <p class=\"pt-3 text-center\">Need to Signup?</p>\n                <a class=\"btn btn-block btn-secondary\" [routerLink]=\"'/register'\">Register Now</a>\n            </div>\n        </div>\n        <!-- END card-->\n        <!-- <div class=\"p-3 text-center\">\n            <span>&copy;</span>\n            <span>{{ settings.getAppSetting('year') }}</span>\n            <span class=\"mx-2\">-</span>\n            <span>{{ settings.getAppSetting('name') }}</span>\n            <br/>\n            <span>{{ settings.getAppSetting('description') }}</span>\n        </div> -->\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '../../shared/shared.module';\r\n\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { RecoverComponent } from './recover/recover.component'; \r\n\r\n@NgModule({\r\n    imports: [\r\n        SharedModule\r\n    ],\r\n    declarations: [\r\n        LoginComponent,\r\n        RegisterComponent,\r\n        RecoverComponent\r\n    ],\r\n    exports: [\r\n        RouterModule,\r\n        LoginComponent,\r\n        RegisterComponent,\r\n        RecoverComponent\r\n    ]\r\n})\r\nexport class PagesModule { }","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-recover',\n  templateUrl: './recover.component.html',\n  styleUrls: ['./recover.component.scss']\n})\nexport class RecoverComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>recover works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { AuthService } from 'src/app/core/auth/auth.service';\nimport { MustMatch } from '../../../shared/helpers/must-match.validator';\n\n@Component({\n    selector: 'app-register',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n    valForm: FormGroup;\n    passwordForm: FormGroup;\n    error = [];\n\n    constructor(public fb: FormBuilder, private authService: AuthService) {\n\n        let password = new FormControl('', Validators.compose([Validators.required, Validators.pattern('^[a-zA-Z0-9]{6,10}$')]));\n        let certainPassword = new FormControl('', Validators.required);\n\n        this.passwordForm = fb.group({\n            'password': password,\n            'confirmPassword': certainPassword\n        }, {\n            validator: MustMatch('password', 'confirmPassword')\n        });\n\n        this.valForm = fb.group({\n            'name': [null, Validators.required],\n            'email': [null, [Validators.required, Validators.email]],\n            // 'accountagreed': [null, Validators.required],\n            'passwordGroup': this.passwordForm\n        });\n    }\n\n    submitForm($ev, value: any) {\n        $ev.preventDefault();\n        for (let c in this.valForm.controls) {\n            this.valForm.controls[c].markAsTouched();\n        }\n        for (let c in this.passwordForm.controls) {\n            this.passwordForm.controls[c].markAsTouched();\n        }\n\n        if (this.valForm.valid) {\n            console.log('Valid!');\n            console.log(value);\n            this.error = null;\n            let payLoad = {name: value.name, email: value.email, password: value.passwordGroup.password, password_confirmation: value.passwordGroup.confirmPassword};\n            this.error = [];\n            return this.authService.signup(payLoad).subscribe(\n              data => console.log(data),\n              err  => this.handleError(err)\n            );\n        }\n    }\n\n    handleError(error) {\n      console.log(error.error.errors);\n      const errors = error.error.errors;\n      for (const property in errors) {\n        this.error = this.error || [];\n        this.error.push(errors[property][0]);\n      }\n    }\n\n    ngOnInit() {\n    }\n\n}\n","<div class=\"wrapper\">\n    <div class=\"block-center mt-4 wd-xl\">\n        <!-- START card-->\n        <div class=\"card card-flat\">\n            <div class=\"card-header text-center bg-dark\">\n                <a href=\"#\">\n                    <img class=\"block-center rounded\" src=\"assets/img/logo.png\" alt=\"Image\" />\n                </a>\n            </div>\n            <div class=\"card-body\">\n                <p class=\"text-center py-2\">SIGNUP TO GET INSTANT ACCESS.</p>\n                <form [formGroup]=\"valForm\" class=\"form-validate mb-3\" role=\"form\" name=\"registerForm\" novalidate=\"\" (submit)=\"submitForm($event, valForm.value)\">\n                    <div class=\"alert alert-danger\" *ngIf=\"error != null && error.length > 0\">\n                        <ul *ngFor=\"let err of error\">\n                            <li>{{err}}</li>\n                        </ul>                        \n                    </div>\n                    <div class=\"form-group\">\n                        <label class=\"text-muted mb-1\">Name</label>\n                        <div class=\"input-group with-focus\">\n                            <input class=\"form-control border-right-0\" type=\"text\" name=\"account_name\" placeholder=\"Enter Name\" autocomplete=\"off\" formControlName=\"name\" required=\"\" />\n                            <div class=\"input-group-append\">\n                                <span class=\"input-group-text text-muted bg-transparent border-left-0\">\n                                    <em class=\"fa fa-user\"></em>\n                                </span>\n                            </div>\n                        </div>\n                        <div class=\"text-danger\" *ngIf=\"valForm.controls['name'].hasError('required') && (valForm.controls['name'].dirty || valForm.controls['name'].touched)\">This field is required</div>\n                    </div>\n                    <div class=\"form-group\">\n                        <label class=\"text-muted mb-1\">Email address</label>\n                        <div class=\"input-group with-focus\">\n                            <input class=\"form-control border-right-0\" type=\"email\" name=\"account_email\" placeholder=\"Enter email\" autocomplete=\"off\" formControlName=\"email\" required=\"\" />\n                            <div class=\"input-group-append\">\n                                <span class=\"input-group-text text-muted bg-transparent border-left-0\">\n                                    <em class=\"fa fa-envelope\"></em>\n                                </span>\n                            </div>\n                        </div>\n                        <div class=\"text-danger\" *ngIf=\"valForm.controls['email'].hasError('required') && (valForm.controls['email'].dirty || valForm.controls['email'].touched)\">This field is required</div>\n                        <div class=\"text-danger\" *ngIf=\"valForm.controls['email'].hasError('email') && (valForm.controls['email'].dirty || valForm.controls['email'].touched)\">This field must be a valid email address</div>\n                    </div>\n                    <div formGroupName=\"passwordGroup\">\n                        <div class=\"form-group\">\n                            <label class=\"text-muted mb-1\">Password</label>\n                            <div class=\"input-group with-focus\">\n                                <input class=\"form-control border-right-0\" id=\"id-password\" type=\"password\" name=\"password\" placeholder=\"Enter Password\" formControlName=\"password\" [formControl]=\"valForm.get('passwordGroup.password')\" />\n                                <div class=\"input-group-append\">\n                                    <span class=\"input-group-text text-muted bg-transparent border-left-0\">\n                                        <em class=\"fa fa-lock\"></em>\n                                    </span>\n                                </div>\n                            </div>\n                            <div class=\"text-danger\" *ngIf=\"valForm.get('passwordGroup.password').hasError('required') && (valForm.get('passwordGroup.password').dirty || valForm.get('passwordGroup.password').touched)\">This field is required</div>\n                            <div class=\"text-danger\" *ngIf=\"valForm.get('passwordGroup.password').hasError('pattern') && (valForm.get('passwordGroup.password').dirty || valForm.get('passwordGroup.password').touched)\">Input should match 'a-zA-Z0-9' and 6-10 length</div>\n                        </div>\n                        <div class=\"form-group\">\n                            <label class=\"text-muted mb-1\">Confirm Password</label>\n                            <div class=\"input-group with-focus\">\n                                <input class=\"form-control border-right-0\" type=\"password\" name=\"confirmPassword\" placeholder=\"Enter Confirm Password\" formControlName=\"confirmPassword\" [formControl]=\"valForm.get('passwordGroup.confirmPassword')\" />\n                                <div class=\"input-group-append\">\n                                    <span class=\"input-group-text text-muted bg-transparent border-left-0\">\n                                        <em class=\"fa fa-lock\"></em>\n                                    </span>\n                                </div>\n                            </div>\n                            <div class=\"text-danger\" *ngIf=\"valForm.get('passwordGroup.confirmPassword').hasError('required') && (valForm.get('passwordGroup.confirmPassword').dirty || valForm.get('passwordGroup.confirmPassword').touched)\">This field is required</div>\n                            <div class=\"text-danger\" *ngIf=\"valForm.get('passwordGroup.confirmPassword').hasError('equalTo')\">Password does Not match</div>\n                        </div>\n                    </div>\n                    <!-- <div class=\"clearfix\">\n                        <div class=\"checkbox c-checkbox float-left mt0\">\n                            <label>\n                                <input type=\"checkbox\" required=\"\" name=\"account_agreed\" formControlName=\"accountagreed\" />\n                                <span class=\"fa fa-check\"></span>I agree with the\n                                <a href=\"#\">terms</a>\n                            </label>\n                        </div>\n                    </div>\n                    <span class=\"text-danger\" *ngIf=\"valForm.controls['accountagreed'].hasError('required') && (valForm.controls['accountagreed'].dirty || valForm.controls['accountagreed'].touched)\">You must agree the terms</span> -->\n                    <button class=\"btn btn-block btn-primary mt-3\" type=\"submit\">Create account</button>\n                </form>\n                <!-- <div class=\"alert alert-danger text-center\"></div> -->\n                <p class=\"pt-3 text-center\">Have an account?</p>\n                <a class=\"btn btn-block btn-secondary\" [routerLink]=\"'/login'\">Signup</a>\n            </div>\n        </div>\n        <!-- END card-->\n        <!-- <div class=\"p-3 text-center\">\n            <span>&copy;</span>\n            <span>{{ settings.getAppSetting('year') }}</span>\n            <span class=\"mx-2\">-</span>\n            <span>{{ settings.getAppSetting('name') }}</span>\n            <br/>\n            <span>{{ settings.getAppSetting('description') }}</span>\n        </div> -->\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { PagesModule } from './pages/pages.module';\r\n\r\nimport { routes } from './routes';\r\n\r\n@NgModule({\r\n    imports: [\r\n        SharedModule,\r\n        RouterModule.forRoot(routes),\r\n        PagesModule\r\n    ],\r\n    declarations: [],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\n\r\nexport class RoutesModule {}","import { Routes } from '@angular/router';\r\nimport { LoginComponent } from './pages/login/login.component';\r\nimport { RegisterComponent } from './pages/register/register.component';\r\nimport { RecoverComponent } from './pages/recover/recover.component';\r\n\r\nexport const routes: Routes = [\r\n\r\n    // Not lazy-loaded routes\r\n    { path: 'login', component: LoginComponent },\r\n    { path: 'register', component: RegisterComponent },\r\n    { path: 'recover', component: RecoverComponent },\r\n\r\n    // Not found\r\n    { path: '**', redirectTo: 'login' }\r\n];","import { FormGroup } from '@angular/forms';\r\n\r\n// custom validator to check that two fields match\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n    return (formGroup: FormGroup) => {\r\n        const control = formGroup.controls[controlName];\r\n        const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n        if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n            // return if another validator has already found an error on the matchingControl\r\n            return;\r\n        }\r\n\r\n        // set error on matchingControl if validation fails\r\n        if (control.value !== matchingControl.value) {\r\n            matchingControl.setErrors({ mustMatch: true });\r\n        } else {\r\n            matchingControl.setErrors(null);\r\n        }\r\n    }\r\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  exports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n  ]\n})\nexport class SharedModule {\n  static forRoot(): ModuleWithProviders {\n      return {\n          ngModule: SharedModule\n      };\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:8000/api',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}